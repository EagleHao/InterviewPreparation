题目：实现Singleton模式
设计一个类，我们只能生成该类的一个实例。

此包讲了单例模式的实现方式
JDK的单例模式源码参考Runtime类

首先：要保证线程的安全性，则要保证线程的原子性、可见性、有序性。
原子性：即一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。
可见性：是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。
有序性：即程序执行的顺序按照代码的先后顺序执行。

volatile只能保证可见性和有序性，并不能保证原子性，且只能作用于变量。
synchronized既能保证原子性，又能保证可见性（在释放锁之前会将变量的值刷新到主存中），但是不能保证有序性；它可以作用于一段代码或方法。

一般情况下，建议使用饿汉式(Singleton3)。只有在要明确实现 lazy loading 效果时，才会使用静态内部类式(Singleton2)。如果涉及到反序列化创建对象时，可以尝试枚举方式(未列出)。
如果有其他特殊的需求，可以考虑使用双重校验锁方式(Singleton1)。


参考资料：http://www.cnblogs.com/dolphin0520/p/3920373.html
	  http://www.runoob.com/design-pattern/singleton-pattern.html


